# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Run Python pytest

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install poetry
      run: |
        curl -sSL https://install.python-poetry.org | python - -y
    
    - name: Configure poetry
      run: poetry config virtualenvs.in-project true
  
    - name: Set up cache
      uses: actions/cache@v3
      id: cache
      with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      run: |
          # `timeout` is not available on macOS, so we define a custom function.
          [ "$(command -v timeout)" ] || function timeout() { perl -e 'alarm shift; exec @ARGV' "$@"; }

          # Using `timeout` is a safeguard against the Poetry command hanging for some reason.
          timeout 10s poetry run pip --version || rm -rf .venv

    - name: Check lock file
      run: poetry lock --check

    - name: Install dependencies
      run: poetry install --with github-actions
    
    - name: Test with pytest
      run: |
        poetry run pytest -sxv
  
    - name: Lint with flake8
      run: |
        poetry run flake8 src tests --count --show-source --statistics
